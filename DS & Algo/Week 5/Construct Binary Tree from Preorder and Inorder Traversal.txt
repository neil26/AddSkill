/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
       int ls=0,le=0;
       int preindex=0;
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.size()!=inorder.size()) return NULL;
        le=preorder.size() - 1;
        TreeNode* root=build(preorder,inorder,ls,le);
        return root;
    }
    TreeNode* build(vector<int>& preorder,vector<int>& inorder,int ls,int le){
        if(ls>le){
            return NULL;
        }
        TreeNode* head=new TreeNode(preorder[preindex++]);
        int inIndex;
        for(int i=ls;i<=le;i++){
            if(inorder[i]==head->val){
                inIndex=i;
                break;
            }
        }
        head->left=build(preorder,inorder,ls,inIndex-1);
        head->right=build(preorder,inorder,inIndex+1,le);
        return head;
    }
};